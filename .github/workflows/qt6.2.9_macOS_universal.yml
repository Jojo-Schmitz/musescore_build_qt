name: "Qt 6.2.9 - macOS - Universal"

on:
  workflow_dispatch:

jobs:
  build_qt:
    runs-on: macos-latest
    steps:
      - name: Setup
        run: |
          brew install cmake ninja
      - name: Download and unpack source
        run: |
          set -o pipefail
          QT_URL="https://download.qt.io/archive/qt/6.2/6.2.9/single/qt-everywhere-opensource-src-6.2.9.tar.xz"
          wget -q "${QT_URL}" -O - | tar xJvf -
      - name: Patch
        run: |
          cd qt-everywhere-src-6.2.9/qtbase
          patch -p1 <<EOF
          diff --git a/cmake/FindWrapOpenGL.cmake b/cmake/FindWrapOpenGL.cmake
          index 3e6abaf..7295a15 100644
          --- a/cmake/FindWrapOpenGL.cmake
          +++ b/cmake/FindWrapOpenGL.cmake
          @@ -17,14 +17,18 @@
           
               add_library(WrapOpenGL::WrapOpenGL INTERFACE IMPORTED)
               if(APPLE)
          +        # CMake 3.27 and older:
                   # On Darwin platforms FindOpenGL sets IMPORTED_LOCATION to the absolute path of the library
                   # within the framework. This ends up as an absolute path link flag, which we don't want,
                   # because that makes our .prl files un-relocatable.
                   # Extract the framework path instead, and use that in INTERFACE_LINK_LIBRARIES,
          -        # which CMake ends up transforming into a reloctable -framework flag.
          +        # which CMake ends up transforming into a relocatable -framework flag.
                   # See https://gitlab.kitware.com/cmake/cmake/-/issues/20871 for details.
          +        #
          +        # CMake 3.28 and above:
          +        # IMPORTED_LOCATION is the absolute path the the OpenGL.framework folder.
                   get_target_property(__opengl_fw_lib_path OpenGL::GL IMPORTED_LOCATION)
          -        if(__opengl_fw_lib_path)
          +        if(__opengl_fw_lib_path AND NOT __opengl_fw_lib_path MATCHES "/([^/]+)\\.framework$")
                       get_filename_component(__opengl_fw_path "${__opengl_fw_lib_path}" DIRECTORY)
                   endif()
           
          EOF
      - name: Configure
        run: |
          mkdir build
          cd build
          ../qt-everywhere-src-6.2.9/configure \
            -prefix ../install \
            -nomake examples \
            -submodules qt5compat,qtdeclarative,qtimageformats,qtnetworkauth,qtscxml,qtsvg,qttools,qttranslations,qtxmlpatterns \
            -- -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
      - name: Build
        working-directory: ./build
        env:
          NINJA_STATUS: "[%f/%t (%c/s avg %o/s); ETA: %W (%P)]   "
        run: |
          cmake --build . --parallel
      - name: Install
        working-directory: ./build
        run: |
          cmake --install .
      - name: Package
        working-directory: ./install
        run: |
          zip -r "../Qt 6.2.9 for macOS.zip" .
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: "Qt 6.2.9 for macOS"
          path: "Qt 6.2.9 for macOS.zip"
